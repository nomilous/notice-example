// Generated by CoffeeScript 1.6.3
var CapsuleEmitter, memoryUsage;

CapsuleEmitter = require('./client/capsule_emitter').CapsuleEmitter;

memoryUsage = process.memoryUsage;

exports.start = function(callback) {
  return CapsuleEmitter.create({
    title: 'Capsule Emitter',
    uuid: 2,
    context: {
      "this": 'is sent to the hub at handshake',
      and: 'is available alongside each capsule traversal',
      that: 'originated from this client'
    },
    cache: {
      "this": 'is kept on the client side',
      and: 'is available alongside local traversals'
    },
    ticks: {
      health: {
        interval: 1000
      }
    },
    connect: {
      secret: 'âˆ†',
      adaptor: 'socket.io',
      url: 'http://localhost:10001',
      errorWait: 1000,
      rejectUnauthorized: false
    }
  }, function(error, emitter) {
    if (error != null) {
      return callback(error);
    }
    emitter.use({
      title: 'put in a hidden timestamp'
    }, function(next, capsule, traversal) {
      capsule.$$set({
        timestamp: new Date,
        hidden: true,
        "protected": true
      });
      return next();
    });
    emitter.use({
      title: 'show ticks'
    }, function(next, capsule, traversal) {
      var heapTotal, heapUsed, rss, _ref;
      if (capsule.$$tick === 'health') {
        if (capsule.$$tick != null) {
          console.log(capsule);
        }
        _ref = memoryUsage(), rss = _ref.rss, heapTotal = _ref.heapTotal, heapUsed = _ref.heapUsed;
        rss = Math.floor(rss / 1024 / 1024 * 100) / 100;
        heapTotal = Math.floor(heapTotal / 1024 / 1024 * 100) / 100;
        heapUsed = Math.floor(heapUsed / 1024 / 1024 * 100) / 100;
        emitter.health('process memory', {
          rss: rss,
          heap: {
            total: heapTotal,
            used: heapUsed
          }
        });
      }
      return next();
    });
    setInterval((function() {
      return emitter.request('text', {
        more: 'stuff'
      });
    }), 1000);
    return callback(null, emitter);
  });
};
